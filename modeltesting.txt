def model_testing(X, Y, model, mode=1, n_sent=15):
    # Eval
    pred_cat = model.predict(X)
    pred = np.argmax(pred_cat, axis=-1)
    y_te_true = np.argmax(Y, -1)
    
    # Convert the index to tag
    pred_tag = [[idx2tag[i] for i in row] for row in pred]
    y_te_true_tag = [[idx2tag[i] for i in row] for row in y_te_true] 
    
    report = flat_classification_report(y_pred=pred_tag, y_true=y_te_true_tag, digits=3)
    print(report)
    
    if mode==1:
        for i in range(X.shape[0]):
            p = model.predict(np.array([X[i]]))
            p = np.argmax(p, axis=-1)
            true = np.argmax(Y[i], -1)
            
            print("Sentence number {} of {} (Prediction Set)".format(i+1, X.shape[0]))
            # Visualization
            print(30 * "=")
            for w, t, pred in zip(X[i], true, p[0]):
                if w != 0:                
                    if idx2tag[pred] in ['BIAS', 'DEI']:
                        print("{:15}: {}".format(words[w-2], idx2tag[pred]))
                
    elif mode==2:
        if n_sent > X.shape[0]:
            n_sent=X.shape[0]
            
        for i in range(n_sent):
            i = np.random.randint(0,X.shape[0]) # choose a random number between 0 and len(X_te)
            p = model.predict(np.array([X[i]]))
            p = np.argmax(p, axis=-1)
            true = np.argmax(Y[i], -1)
            
            print("Sample number {} of {} (Test Set)".format(i, X.shape[0]))
            # Visualization
            print("{:15}||{:5}||{}".format("Word", "True", "Pred"))
            print(30 * "=")
            for w, t, pred in zip(X[i], true, p[0]):
                if w != 0:
                    print("{:15}: {:5} {}".format(words[w-2], idx2tag[t], idx2tag[pred]))
    
    return report